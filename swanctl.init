#!/bin/bash /etc/rc.common

. /lib/functions.sh

START=90
STOP=10

USE_PROCD=1
PROCD_DEBUG=1
PROG=/usr/lib/ipsec/charon 

. $IPKG_INSTROOT/lib/functions.sh
. $IPKG_INSTROOT/lib/functions/network.sh

STRONGSWAN_CONF_FILE=/etc/strongswan.conf
STRONGSWAN_VAR_CONF_FILE=/var/ipsec/strongswan.conf

SWANCTL_CONF_FILE=/etc/swanctl/swanctl.conf
SWANCTL_VAR_CONF_FILE=/var/swanctl/swanctl.conf
IPSEC_UCI_FILE=/etc/config/ipsec

WAIT_FOR_INTF=0

CONFIG_FAIL=0

time2seconds() {
	local timestring="$1"
	local multiplier number suffix

	suffix="${timestring//[0-9]}"
	number="${timestring%%"$suffix"}"
	[ "$number$suffix" != "$timestring" ] && return 1
	case "$suffix" in
	""|s)
		multiplier=1 ;;
	m)
		multiplier=60 ;;
	h)
		multiplier=3600 ;;
	d)
		multiplier=86400 ;;
	*)
		return 1 ;;
	esac
	echo $(( number * multiplier ))
}

seconds2time() {
	local seconds="$1"

	if [ $seconds -eq 0 ]; then
		echo "0s"
	elif [ $((seconds % 86400)) -eq 0 ]; then
		echo "$((seconds / 86400))d"
	elif [ $((seconds % 3600)) -eq 0 ]; then
		echo "$((seconds / 3600))h"
	elif [ $((seconds % 60)) -eq 0 ]; then
		echo "$((seconds / 60))m"
	else
		echo "${seconds}s"
	fi
}

file_reset() {
	: > "$1"
}

xappend() {
	local file="$1"
	local indent="$2"
	shift 2

	for cmd in "$@"; do
		echo "$indent$cmd" >> "$file"
	done
}

swan_reset() {
	file_reset "$STRONGSWAN_VAR_CONF_FILE"
}

swan_xappend() {
	xappend "$STRONGSWAN_VAR_CONF_FILE" "$@"
}

swan_xappend0() {
	swan_xappend "" "$@"
}

swan_xappend1() {
	swan_xappend "  " "$@"
}

swan_xappend2() {
	swan_xappend "    " "$@"
}

swan_xappend3() {
	swan_xappend "      " "$@"
}

swan_xappend4() {
	swan_xappend "        " "$@"
}

swanctl_reset() {
	file_reset "$SWANCTL_VAR_CONF_FILE"
}

swanctl_xappend() {
	xappend "$SWANCTL_VAR_CONF_FILE" "$@"
}

swanctl_xappend0() {
	swanctl_xappend "" "$@"
}

swanctl_xappend1() {
	swanctl_xappend "  " "$@"
}

swanctl_xappend2() {	swanctl_xappend "    " "$@"
}

swanctl_xappend3() {
	swanctl_xappend "      " "$@"
}

swanctl_xappend4() {
	swanctl_xappend "        " "$@"
}

warning() {
	echo "WARNING: $@" >&2
}

fatal() {
	echo "swanctl.init ERROR: $@" >&2 >/dev/console
	CONFIG_FAIL=1
}

config_bypass() {
	local tunnels
	local flagv6
	local -i cnt=1

	swanctl_xappend0 "connections {"
	for tunnel in $( uci show ipsec | grep "bypasslan_en='1'" | cut -d '.' -f2 ); do
		flagv6=$( uci -q get ipsec."$tunnel".enabled )
		[ "$flagv6" = "0" ] && continue
		subnet=$( uci -q get ipsec."$tunnel".bypasslan_subnet )
		swanctl_xappend1 "${tunnel}_bypass {"
		swanctl_xappend2 "children {"
		for net in $subnet; do
			swanctl_xappend3 "child_$cnt {"
			swanctl_xappend4 "local_ts = $net"
			swanctl_xappend4 "remote_ts = $net"
			swanctl_xappend4 "start_action = trap"
			swanctl_xappend4 "mode = pass"
			swanctl_xappend3 "}"
		done
		swanctl_xappend2 "}"
		swanctl_xappend1 "}"
		((++cnt))
	done
	en_tunnel=$( uci show ipsec | grep "enabled='1'" | cut -d '.' -f2 )
	flagv6=( $(uci show ipsec | grep "local_subnet" | grep ":" | cut -d '.' -f2 ) )
	flagv6=$( diff <(echo "$en_tunnel") <(echo "$flagv6") | sed '/^+/d; /^-/d; /^@/d' | xargs )
	[ -n "$flagv6" ] && {
		icmpv6="133 134 135 136 137"
		swanctl_xappend1 "ndp {"
		swanctl_xappend2 "children {"
		for icmp in $icmpv6; do
			swanctl_xappend3 "bypass_$icmp {"
			swanctl_xappend4 "local_ts = ::/0[ipv6-icmp/$icmp]"
			swanctl_xappend4 "remote_ts = ::/0[ipv6-icmp/$icmp]"
			swanctl_xappend4 "mode = pass"
			swanctl_xappend4 "start_action = trap"
			swanctl_xappend3 "}"
		done
		swanctl_xappend2 "}"
		swanctl_xappend1 "}"
	}
	swanctl_xappend0 "}"
}

config_child() {
	local config_name="$1"
	local mode
	local local_subnet
	local remote_subnet
	local dpdaction
	local rekeytime

	config_get dpdaction "$1" dpdaction "clear"
	config_get rekeytime "$1" esp_rekeytime ""
	config_get esp_proposal "$1" esp_proposal ""
	config_get mode "$1" tunnel_mode "tunnel"
	config_get peer_mode "$1" peer_mode "local"

	if [ "$peer_mode" = "local" ]; then
		startaction="trap"
		dpdaction="trap"
	else
		startaction="none"
		dpdaction="none"
	fi

	[ "$mode" = "tunnel" ] && {
		acl_l=( $(uci -q get ipsec."$config_name".local_acl) )
		acl_r=( $(uci -q get ipsec."$config_name".remote_acl) )
		local_subnet=$( uci -q get ipsec."$config_name".local_subnet )
		remote_subnet=$( uci -q get ipsec."$config_name".remote_subnet )
		declare -i cnt=0 child_cnt
		declare -A childs
		for subnet in ${acl_l[@]}; do
			child_cnt=1
			for net_l in $local_subnet;do
				for net_r in $remote_subnet;do
					fl=$( echo "${acl_l[$cnt]}" | grepcidr "$net_l" )
					fr=$( echo "${acl_r[$cnt]}" | grepcidr "$net_r" )
					if [ "$fl" == "${acl_l[$cnt]}" ] && [ "$fr" == "${acl_r[$cnt]}" ]; then 
						childs["child$child_cnt"]="$net_l $net_r"
						((++cnt))
						break 2
					fi
					((++child_cnt))
				done
			done
		done
		for net in $( for z in ${!childs[@]};do echo "$z"; done | sort -V ); do
			net_l=$( echo "${childs[$net]}" | cut -d ' ' -f1 )
			net_r=$( echo "${childs[$net]}" | cut -d ' ' -f2 )
			swanctl_xappend3 "${config_name}_$net {"
			swanctl_xappend4 "mode = tunnel"
			swanctl_xappend4 "start_action = $startaction"
			[ -n "$dpdaction" ] && swanctl_xappend4 "dpd_action = $dpdaction"
			pfs_no=$( echo "$esp_proposal" | cut -d '-' -f3 )
			[ "$pfs_no" = "no" ] && esp_proposal=$( echo "$esp_proposal"  | cut -d '-' -f1-2)
			swanctl_xappend4 "esp_proposals = $esp_proposal"
			swanctl_xappend4 "local_ts = $net_l"
			swanctl_xappend4 "remote_ts = $net_r"
			[ -n "$rekeytime" ] && swanctl_xappend4 "rekey_time = $rekeytime"
			swanctl_xappend4 "updown = /etc/swanctl/ipsec_updown"
		    swanctl_xappend3 "}"
		done
		return 0
	}

	swanctl_xappend3 "${config_name}_child {"
	swanctl_xappend4 "mode = transport"
	pfs_no=$( echo "$esp_proposal" | cut -d '-' -f3 )
	[ "$pfs_no" = "no" ] && esp_proposal=$( echo "$esp_proposal"  | cut -d '-' -f1-2)
	swanctl_xappend4 "esp_proposals = $esp_proposal"
	[ -n "$rekeytime" ] && swanctl_xappend4 "rekey_time = $rekeytime"
	swanctl_xappend4 "updown = /etc/swanctl/ipsec_updown"
    swanctl_xappend3 "}"
}

config_connection() {
	local config_name="$1"
	local enabled
	local local_gateway
	local remote_gateway
	local preshared_key
	local auth_method
	local dpddelay
	local keyexchange
	local rekeytime
	local ipdest

	config_get_bool enabled "$1" enabled 0
	[ $enabled -eq 0 ] && return

	active=$(uci -q get ipsecInfo."$1".active)
	[ $active -ne 1 ] && return
	
	config_get remote_gateway "$1" remote_gateway
	config_get preshared_key "$1" preshared_key
	config_get auth_method "$1" auth_method "psk"
	config_get local_identifier "$1" local_identifier ""
	config_get remote_identifier "$1" remote_identifier ""
	config_get local_gateway "$1" local_gateway ""
	config_get dpddelay "$1" dpddelay "30s"
	config_get keyexchange "$1" keyexchange "ikev2"
	config_get aggressive "$1" aggressive "no"
	config_get rekeytime "$1" ike_rekeytime
	config_get ike_proposal "$1" ike_proposal

	[ "$remote_gateway" = "Any" ] && remote_gateway="%any"

	if [[ "$local_gateway" = "Any" ]];then
		ip_flag=$(echo "$remote_gateway" | grep ":")
		[ -n "$ip_flag" ] && ipdest=$(ip route get :: | cut -d ' ' -f5) || ipdest="1.1.1.1"
		local_gateway=$(ip route get "$ipdest" | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	else
		[ "$local_gateway" = "Cellular" -o "$local_gateway" = "Cellularv6" ] && local_gateway=$( echo "${local_gateway,,}" )
		version=$(echo "$local_gateway" | grep -o "v6")
		[ -n "$version" ] && local_gateway=$(ifstatus "$local_gateway" | jsonfilter -e '@["ipv6-address"][0].address' 2> /dev/null) || \
			local_gateway=$(ifstatus "$local_gateway" | jsonfilter -e '@["ipv4-address"][0].address' 2> /dev/null)
	fi

	[ -z "$local_gateway" ] && swanctl_xappend0 "# no local gateway for $config_name" && return

	[ -z "$local_identifier" ] && local_identifier=$local_gateway
	[ -z "$remote_identifier" ] && remote_identifier=$remote_gateway

	swanctl_xappend0 "# config for $config_name"
	swanctl_xappend0 "connections {"
	swanctl_xappend1 "$config_name {"
	swanctl_xappend2 "local_addrs = $local_gateway"
	swanctl_xappend2 "remote_addrs = $remote_gateway"

	swanctl_xappend2 "local {"
	swanctl_xappend3 "auth = $auth_method"
	swanctl_xappend3 "id = \"$local_identifier\""
	swanctl_xappend2 "}"

	swanctl_xappend2 "remote {"
	swanctl_xappend3 "auth = $auth_method"
	swanctl_xappend3 "id = \"$remote_identifier\""
	swanctl_xappend2 "}"

	case "$keyexchange" in
	ikev1)
		swanctl_xappend2 "version = 1"
		[ "$aggressive" = "yes" ] && swanctl_xappend2 "aggressive = yes" ;;		
	ikev2)
		swanctl_xappend2 "version = 2" ;;
	*)
		fatal "Keyexchange $keyexchange not supported"
		return 1
		;;
	esac

	swanctl_xappend2 "mobike = no"
	swanctl_xappend2 "rekey_time = $rekeytime"
	swanctl_xappend2 "proposals = $ike_proposal"
	[ -n "$dpddelay" ] && swanctl_xappend2 "dpd_delay = $dpddelay"
	swanctl_xappend2 "keyingtries = 3"

	swanctl_xappend2 "children {"
		config_child "$1" 
	swanctl_xappend2 "}"
	swanctl_xappend1 "}"
	swanctl_xappend0 "}"

	if [ "$auth_method" = psk ]; then
		swanctl_xappend0 ""

		swanctl_xappend0 "secrets {"
		swanctl_xappend1 "ike-$config_name {"
		swanctl_xappend2 "secret = $preshared_key"
		if [ -n "$local_identifier" ]; then
			swanctl_xappend2 "id1 = $local_identifier"
			if [ -n "$remote_identifier" ]; then
				swanctl_xappend2 "id2 = $remote_identifier"
			fi
		fi
		swanctl_xappend1 "}"
		swanctl_xappend0 "}"
	else
		fatal "AuthenticationMode $config_name $auth_mode $auth_method not supported"
	fi

	swanctl_xappend0 ""
}

do_preamble() {
	swanctl_xappend0 "# generated by /etc/init.d/swanctl"
}

do_postamble() {
	swan_xappend0 "# generated by /etc/init.d/swanctl"
	swan_xappend0 "charon {"
	swan_xappend1 "install_routes = yes"
	swan_xappend1 "close_ike_on_child_failure=yes``"
	swan_xappend1 "inactivity_close_ike=no"
	swan_xappend1 "retransmit_tries=3"
	swan_xappend1 "retransmit_timeout=2"
	swan_xappend1 "retransmit_base=0.8"

	swan_xappend1 "start-scripts {"
	swan_xappend2 "startt = /etc/swanctl/ipsec_startscript 0<&- &>/dev/null &"
	swan_xappend2 "load-all = /usr/sbin/swanctl --load-all --noprompt"
	swan_xappend1 "}"
	swan_xappend1 "filelog {"
	swan_xappend2 "charon {"
	swan_xappend2 "path = /var/log/charon.log"
	swan_xappend2 "time_format = %b %e %T"
	swan_xappend2 "append = no"
	swan_xappend2 "default = 1"
	swan_xappend2 "}"
	swan_xappend2 "stderr {"
	swan_xappend2 "ike = 2"
	swan_xappend2 "knl = 3"
	swan_xappend2 "ike_name = yes"
	swan_xappend2 "}"
	swan_xappend1 "}"
	[ "$aggressive" = "yes" ] && swan_xappend1 "i_dont_care_about_security_and_use_aggressive_mode_psk = yes"
	swan_xappend0 "}"
}

prepare_env() {
	mkdir -p /var/ipsec /var/swanctl

	swan_reset
	swanctl_reset
	do_preamble

	config_load ipsec
	config_foreach config_connection ipsec
	config_bypass

	do_postamble
}

service_running() {
	swanctl --stats > /dev/null 2>&1
}

reload_service() {
	running && {
		prepare_env
		[ $WAIT_FOR_INTF -eq 0 ] && {
			swanctl --load-all --noprompt
			return
		}
	}
	start
}

stop_service() {
	swan_reset
	swanctl_reset
}

service_triggers() {
	procd_add_reload_trigger "ipsec"
	config load "ipsec"
	procd_add_reload_interface_trigger eth1
}

start_service() {
	prepare_env

	[ $WAIT_FOR_INTF -eq 1 ] && return

	if [ $CONFIG_FAIL -ne 0 ]; then
		procd_set_param error "Invalid configuration"
		return
	fi

	procd_open_instance
	procd_set_param command $PROG
	procd_set_param file /etc/config/ipsec
	procd_set_param netdev eth1
	procd_append_param file $STRONGSWAN_CONF_FILE
	procd_set_param respawn
	procd_set_param limits core="unlimited" nofile="65000 65536" nproc="5000 10000" rtprio="90 99" sigpending="5000 7000" memlock="102400 1002400"
	procd_close_instance

	# procd_open_instance 
	# procd_set_param command /etc/swanctl/ipsec_reload
	# procd_set_param respawn
	# procd_close_instance
}
